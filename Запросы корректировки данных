-- Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN('Булгаков М.А.', 'Достоевский Ф.М.') ;
SELECT * FROM book;

-- Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN (
    SELECT author
    FROM book
    );
    SELECT * FROM book

-- Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.

UPDATE book
SET price = 0.9 * price
WHERE amount BETWEEN 5 AND 10;
SELECT * FROM book;

-- В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. 
-- А цену тех книг, которые покупатель не заказывал, снизить на 10%.

UPDATE book
SET buy = IF(buy >= amount, amount, buy),
price = IF(buy = 0, price * 0.9, price);
SELECT * FROM book;

-- Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), 
-- но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).

UPDATE book, supply
SET book.amount = book.amount + supply.amount,
book.price = (book.price + supply.price) / 2
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;

-- Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.

DELETE FROM supply
WHERE author IN (
    SELECT author
    FROM book
    GROUP BY author
    HAVING SUM(amount) > 10 
);
SELECT * FROM supply;

-- Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book.
-- В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.

CREATE TABLE ordering AS
SELECT author, title, 
   (
    SELECT ROUND(AVG(amount)) 
    FROM book
   ) AS amount
FROM book
WHERE amount < ( SELECT ROUND(AVG(amount))
                FROM book);
               SELECT * FROM ordering;

-- Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. 
-- При этом суммы заносить только в пустые поля столбца  sum_fine.

UPDATE fine f, traffic_violation tv
SET f.sum_fine = tv.sum_fine
WHERE f.sum_fine IS NULL AND f.violation = tv.violation;
SELECT * FROM fine;

-- Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. 
-- При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.

SELECT name, number_plate, violation
FROM fine 
GROUP BY name, number_plate, violation
HAVING COUNT(violation) > 1
ORDER BY name ASC, number_plate, violation;

-- В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей.

UPDATE fine,
( SELECT name, number_plate, violation
 FROM fine
GROUP BY name, number_plate, violation
HAVING COUNT(number_plate) > 1 ) AS query_in 
SET sum_fine = sum_fine * 2
WHERE fine.name = query_in.name AND fine.number_plate = query_in.number_plate AND fine.violation = query_in.violation
AND fine.date_payment IS NULL;
SELECT * FROM fine;

-- В таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment; 
-- уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.

UPDATE fine f, payment p
SET
f.date_payment = p.date_payment,
f.sum_fine = IF( DATEDIFF(p.date_payment, f.date_violation) <= 20, f.sum_fine / 2, f.sum_fine )
                WHERE f.name = p.name
               AND f.number_plate = p.number_plate
               AND f.violation = p.violation
                AND f.date_payment  IS NULL;
                SELECT * FROM fine;

-- Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.

CREATE TABLE back_payment AS
SELECT name, number_plate, violation, sum_fine, date_violation 
FROM fine
WHERE date_payment IS NULL;
SELECT * FROM back_payment;

-- Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года. 

DELETE FROM fine 
WHERE date_violation < '2020-02-01';
SELECT * FROM fine;

            -- ЗАПРОСЫ КОРРЕКТИРОВКИ, СОЕДИНЕНИЕ ТАБЛИЦ --

Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену.
А в таблице  supply обнулить количество этих книг.

UPDATE book 
     INNER JOIN author ON author.author_id = book.author_id
     INNER JOIN supply ON book.title = supply.title 
                         and supply.author = author.name_author
SET book.amount = book.amount + supply.amount,
    book.price = (book.price * book.amount + supply.price * supply.amount)/(book.amount + supply.amount),
    supply.amount = 0   
WHERE book.price <> supply.price;

SELECT * FROM book;

SELECT * FROM supply;

Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author. 
Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.

INSERT INTO author (author_id, name_author)
SELECT author.name_author, supply.author
FROM author RIGHT JOIN supply ON author.name_author=supply.author
WHERE author.name_author IS NULL;
SELECT * FROM author;

Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для просмотра таблицу book.

INSERT INTO book(title, author_id, price, amount)
SELECT title, author_id, price, amount
FROM author 
INNER JOIN supply ON author.name_author = supply.author
WHERE amount <> 0;
SELECT * FROM book;

 Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», а для книги «Остров сокровищ» Стивенсона - «Приключения». (Использовать два запроса).

UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Поэзия'
      )
WHERE book_id = 10;
UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Приключения'
      )
WHERE book_id = 11;
SELECT * FROM book;

Удалить всех авторов и все их книги, общее количество книг которых меньше 20.

DELETE FROM author
WHERE author_id IN (
        SELECT author_id
    FROM book
    GROUP BY author_id
    HAVING SUM(amount) < 20);
    
SELECT* FROM author;
SELECT* FROM book;

Удалить все жанры, к которым относится меньше 4-х наименований книг. В таблице book для этих жанров установить значение Null.

DELETE FROM genre
WHERE genre_id IN (
        SELECT genre_id
    FROM book
    GROUP BY genre_id
    HAVING COUNT(title) < 4);
    
SELECT* FROM genre;
SELECT* FROM book;

Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. 
В запросе для отбора авторов использовать полное название жанра, а не его id.

DELETE FROM author
USING 
    author 
    INNER JOIN book USING (author_id) 
    INNER JOIN genre USING (genre_id)    
WHERE genre.name_genre LIKE 'Поэзия';

SELECT * FROM author;

SELECT * FROM book;

-- Включить нового человека в таблицу с клиентами. Его имя Попов Илья, его email popov@test, проживает он в Москве.

INSERT INTO client (name_client, city_id, email) 
SELECT 'Попов Илья', city_id, 'popov@test'
FROM city
WHERE name_city = 'Москва';

SELECT * FROM client;

-- Создать новый заказ для Попова Ильи. Его комментарий для заказа: «Связаться со мной по вопросу доставки».

INSERT INTO buy(buy_description, client_id)
SELECT 'Связаться со мной по вопросу доставки', 
(SELECT client_id FROM client WHERE name_client = 'Попов Илья');

SELECT * FROM buy;




