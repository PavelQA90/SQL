-- Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. 
-- В результат включить столбцы name, city, per_diem, date_first, date_last.

SELECT name, city, per_diem, date_first, date_last
FROM trip 
WHERE name LIKE '%а %.%.'
ORDER BY date_last DESC;

-- Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.

SELECT city, COUNT(city) AS Количество
FROM trip
GROUP BY city
ORDER BY 2 DESC
LIMIT 2;

-- Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). 
-- Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).

SELECT name, city, DATEDIFF(date_last, date_first) + 1 AS Длительность
FROM trip
WHERE city NOT IN ('Москва', 'Санкт-Петербург')
ORDER BY Длительность DESC, city DESC;

-- Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.

SELECT name, city, date_first, date_last
FROM trip
WHERE DATEDIFF(date_last, date_first) = ( SELECT MIN(DATEDIFF(date_last, date_first))
                   FROM trip);

-- Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой).
-- В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .

SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first) = MONTH(date_last)
ORDER BY city ASC, name ASC;

-- Вывести название месяца и количество командировок для каждого месяца. 
-- Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. 
-- Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.

SELECT MONTHNAME(date_first) AS Месяц, COUNT(MONTHNAME(date_first)) AS Количество
FROM trip
GROUP BY Месяц 
ORDER BY Количество DESC, Месяц ASC;

-- Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. 
-- Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. 
-- Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.

SELECT name, city, date_first, (DATEDIFF(date_last, date_first) + 1) * per_diem AS Сумма
FROM trip
WHERE date_first BETWEEN '2020-02-01' AND '2020-03-31'
ORDER BY name ASC, Сумма DESC;

-- Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. 
-- Последний столбец назвать Сумма.

SELECT name, SUM((DATEDIFF(date_last, date_first) + 1) * per_diem) AS Сумма
FROM trip
GROUP BY name
HAVING COUNT(name) > 3
ORDER BY Сумма DESC;

                 -- База данных «Интернет-магазин книг», запросы на выборку --

-- Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.

SELECT buy.buy_id, book.title, book.price, buy_book.amount
FROM 
    client 
    INNER JOIN buy ON client.client_id = buy.client_id
    INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
    INNER JOIN book ON buy_book.book_id = book.book_id
WHERE name_client = 'Баранов Павел'
ORDER BY buy_id, title;

-- Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  
-- Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.

SELECT name_author, title, COUNT(buy_book.amount) AS 'Количество'
FROM author
INNER JOIN book ON author.author_id = book.author_id
LEFT JOIN buy_book ON buy_book.book_id = book.book_id
GROUP BY book.title, book.author_id
ORDER BY name_author, title;

-- Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. 
-- Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.

SELECT name_city, COUNT(buy.buy_id) AS 'Количество'
FROM buy
INNER JOIN client USING (client_id)
INNER JOIN city USING (city_id)
GROUP BY name_city
ORDER BY 'Количество', name_city;

-- Вывести номера всех оплаченных заказов и даты, когда они были оплачены.

SELECT DISTINCT buy_id, date_step_end
FROM buy_step
WHERE step_id = 1 AND date_step_end IS NOT NULL;

-- Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) 
-- и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. 
-- Последний столбец назвать Стоимость.

SELECT buy_book.buy_id, name_client, SUM(buy_book.amount * price) AS "Стоимость"
FROM book 
INNER JOIN buy_book USING (book_id)
INNER JOIN buy USING (buy_id)
INNER JOIN client USING (client_id)
GROUP BY buy_book.buy_id
ORDER BY buy_book.buy_id;

-- Вывести номера заказов (buy_id) и названия этапов,  на которых они в данный момент находятся. 
-- Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.

SELECT buy_id, name_step
FROM buy_step
INNER JOIN step USING (step_id)
WHERE date_step_end IS NULL AND date_step_beg IS NOT NULL; 

-- В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). 
-- Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. 
-- В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.

SELECT buy_id, DATEDIFF(date_step_end, date_step_beg) AS "Количество_дней", IF(DATEDIFF(date_step_end, date_step_beg) - days_delivery<0, 0, DATEDIFF(date_step_end, date_step_beg)- days_delivery) AS "Опоздание"
FROM city 
INNER JOIN client USING (city_id)
INNER JOIN buy USING (client_id)
INNER JOIN buy_step USING (buy_id)
INNER JOIN step USING (step_id)
WHERE name_step = "Транспортировка" AND date_step_end IS NOT NULL
ORDER BY buy_id;

-- Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.

SELECT DISTINCT name_client
FROM client 
INNER JOIN buy USING (client_id)
INNER JOIN buy_book USING (buy_id)
INNER JOIN book USING (book_id)
INNER JOIN author USING (author_id)
WHERE author.name_author="Достоевский Ф.М."
ORDER BY name_client;

-- Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний столбец назвать Количество.

SELECT name_genre, SUM(buy_book.amount) AS Количество
FROM genre
INNER JOIN book USING (genre_id)
INNER JOIN buy_book USING (book_id)
GROUP BY name_genre
HAVING SUM(buy_book.amount) = 
   (SELECT MAX(sum_amount) 
       FROM 
        (SELECT SUM(buy_book.amount) AS sum_amount
            FROM buy_book
         INNER JOIN book on buy_book.book_id = book.book_id
         GROUP BY genre_id) 
    query_in);

-- Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. 
-- Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.

SELECT YEAR(buy_archive.date_payment) AS Год, MONTHNAME(buy_archive.date_payment) AS Месяц, SUM(buy_archive.price * buy_archive.amount) AS Сумма
FROM buy_archive
WHERE buy_archive.date_payment IS NOT NULL
GROUP BY MONTHNAME(buy_archive.date_payment), YEAR(buy_archive.date_payment)
UNION 
SELECT YEAR(buy_step.date_step_end) AS Год, MONTHNAME(buy_step.date_step_end) AS Месяц, SUM(book.price * buy_book.amount) AS Сумма
FROM 
    book 
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id) 
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)  
WHERE buy_step.date_step_end IS NOT NULL AND name_step = "Оплата"
GROUP BY MONTHNAME(buy_step.date_step_end), YEAR(buy_step.date_step_end)
ORDER BY Месяц, Год;

-- Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за 2020 и 2019 год . 
-- За 2020 год проданными считать те экземпляры, которые уже оплачены. 
-- Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.

SELECT title, SUM(qw.amount) as Количество, SUM(qw.sum_price) as Сумма
FROM (
SELECT title, SUM(buy_archive.amount) as amount, SUM(buy_archive.amount*buy_archive.price) as sum_price
FROM buy_archive
INNER JOIN book on buy_archive.book_id = book.book_id
GROUP BY title
UNION
    SELECT title, SUM(buy_book.amount), SUM(buy_book.amount*book.price)
    FROM buy_book
    INNER JOIN book USING(book_id)
    INNER JOIN buy USING(buy_id)
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)
    WHERE date_step_end IS NOT Null and step_id = 1
    GROUP BY title
) AS qw
GROUP BY qw.title
ORDER BY Сумма DESC;












